global _start

section .data
str1 db 0xa 
message db "In 7 bit there is  1!", 0xa ; Сообщение если в 7 бите 1 
array dw 10, -10, 10, -10, 10, -10, 10, -10, 10, -10, 10, -10 ; Сумма положительных 60, сумма отрицательных -60 

sum_positiv  dw 0           ; Выделение памяти для суммы положительных элементов
sum_negative dw 0           ; Выделение памяти для суммы отрицательных элементов

section .text 

_start:
    mov eax, 12         ; Количество элементов в массиве
    xor bx, bx          ; Сумма положительных элементов 
    xor cx, cx          ; Сумма отрицательных элементов 
    mov esi, array      ; Указатель на элемент массива

for:
    mov dx, [esi]       ; Помещаем значение  элемента массива в dx
    cmp dx, 0           ; Сравиваем значение элемента массива с 0
    jl for_sum_negative ; Если значение меньше нуля то переход
    add bx, dx          ; Суммируем значения эдементов массива в bx
    add esi, 2          ; Адрес следующего элемента
    dec eax             ; Уменьшаем счетчик кол-ва элементов
    jnz for             ; если счетчик не равен 0, то тогда выполняем цикл
    jmp write_value     ; Переход к след. части программы


for_sum_negative:
    add cx, dx          ; Суммируем значения эдементов массива в сx
    add esi, 2          ; Адрес следующего элемента
    dec eax             ; Уменьшаем счетчик кол-ва элементов
    jnz for             ; если счетчик не равен 0, то тогда выполняем цикл


write_value:
    mov [sum_negative], cx  ; записывает значение суммы в память 
    mov [sum_positiv],  bx  ; записывает значение суммы в память 


check_7:
    bt  cx, 0x6             ; Проверка 7 бита 
    jc print_check_7        ; Если 7 бит  равен 1 то переход 
    jmp print


print_check_7:
    mov edx, 22                   ; Кол-во выводимых элементов
    mov ecx, message              ; Что выводим
    mov ebx, 1                    ; файловый дескриптор (stdout)
    mov eax, 4                    ; Номер прерывание (sys_write)
    int 0x80                      ; Вызов прерывания 

print:
    ; Вывод суммы положительных элементов 
    mov edx, 2                  ; Кол-во выводимых элементов
    mov ecx, sum_positiv        ; Что выводим
    mov ebx, 1                  ; файловый дескриптор (stdout)
    mov eax, 4                  ; Номер прерывание (sys_write)
    int 0x80                    ; Вызов прерывания 

    ;Вывод символа перехода на новую строку 
    mov edx, 1                  ; Кол-во выводимых элементов
    mov ecx, str1               ; Что выводим
    mov ebx, 1                  ; файловый дескриптор (stdout)
    mov eax, 4                  ; Номер прерывание (sys_write)
    int 0x80                    ; Вызов прерывания 


    ; Вывод суммы отрицательных элементов 
    mov dx, [sum_negative]      ; Инвертируем число, чтобы вывел нормальный символ аски
    not dx
    inc dx
    mov [sum_negative], dx
    mov edx, 2                  ; Кол-во выводимых элементов
    mov ecx, sum_negative       ; Что выводим
    mov ebx, 1                  ; файловый дескриптор (stdout)
    mov eax, 4                  ; Номер прерывание (sys_write)
    int 0x80                    ; Вызов прерывания 

    ;Вывод символа перехода на новую строку 
    mov ebx, 1                  ; файловый дескриптор (stdout)
    mov eax, 4                  ; Номер прерывание (sys_write)
    mov edx, 1                  ; Кол-во выводимых элементов
    mov ecx, str1                 ; Что выводим
    int 0x80                    ; Вызов прерывания 

exit:
    mov eax, 1          ; Номер прерывание (sys_exit)
    int 0x80            ; Вызов прерывания

